// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ESRC_Heart_SDK_iOS
@_exported import ESRC_Heart_SDK_iOS
import Foundation
import Swift
import UIKit
@_hasMissingDesignatedInitializers public class FaceDetector {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ESRCLicense : ESRC_Heart_SDK_iOS.ESRCLicenseHandler {
  public static var LICENSE_UNREG: Swift.Int
  public static var LICENSE_FULL: Swift.Int
  public static var LICENSE_FACE: Swift.Int
  public static var LICENSE_HEART: Swift.Int
  public static func getInstance() -> ESRC_Heart_SDK_iOS.ESRCLicense
  public static func initWithApplicationId(appId: Swift.String, licenseHandler: ESRC_Heart_SDK_iOS.ESRCLicenseHandler) -> Swift.Bool
  public static func getApplicationId() -> Swift.String
  public static func getType() -> Swift.Int
  public static func isValidated() -> Swift.Bool
  public func onValidatedLicense()
  public func onInvalidatedLicense()
  @objc deinit
}
public protocol ESRCLicenseHandler {
  func onValidatedLicense()
  func onInvalidatedLicense()
}
@_hasMissingDesignatedInitializers public class MeasureEnvAnalyzer {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RemoteHREstimator {
  @objc deinit
}
public class ESRCMeasureEnv {
  public static var MEASURE_ENV_BRIGHTNESS_NONE: Swift.Int
  public static var MEASURE_ENV_BRIGHTNESS_HIGH: Swift.Int
  public static var MEASURE_ENV_BRIGHTNESS_NORMAL: Swift.Int
  public static var MEASURE_ENV_BRIGHTNESS_LOW: Swift.Int
  public init()
  public init(brightness: Swift.Int)
  public init(other: ESRC_Heart_SDK_iOS.ESRCMeasureEnv)
  public func getBrightness() -> Swift.Int
  public func setBrightness(brightness: Swift.Int)
  public func setMeasureEnv(measureEnv: ESRC_Heart_SDK_iOS.ESRCMeasureEnv)
  public func toString() -> Swift.String
  @objc deinit
}
public class ESRCFace {
  public init()
  public init(x: Swift.Int, y: Swift.Int, w: Swift.Int, h: Swift.Int, conf: Swift.Double)
  public init(other: ESRC_Heart_SDK_iOS.ESRCFace)
  public func getX() -> Swift.Int
  public func getY() -> Swift.Int
  public func getW() -> Swift.Int
  public func getH() -> Swift.Int
  public func getConf() -> Swift.Double
  public func setX(x: Swift.Int)
  public func setY(y: Swift.Int)
  public func setW(w: Swift.Int)
  public func setH(h: Swift.Int)
  public func setConf(conf: Swift.Double)
  public func setFace(face: ESRC_Heart_SDK_iOS.ESRCFace)
  public func toString() -> Swift.String
  @objc deinit
}
public class ESRCRemoteHR {
  public init()
  public init(hr: Swift.Double)
  public init(other: ESRC_Heart_SDK_iOS.ESRCRemoteHR)
  public func getHR() -> Swift.Double
  public func setHR(hr: Swift.Double)
  public func toString() -> Swift.String
  @objc deinit
}
public class ESRCHRV {
  public static var HRV_COUNT: Swift.Int
  public init()
  public init(bpm: Swift.Double, sdnn: Swift.Double, rmssd: Swift.Double, pnn50: Swift.Double, vlf: Swift.Double, lf: Swift.Double, hf: Swift.Double, vlfp: Swift.Double, lfp: Swift.Double, hfp: Swift.Double, tp: Swift.Double, lnVlf: Swift.Double, lnLf: Swift.Double, lnHf: Swift.Double, lnTp: Swift.Double, normLf: Swift.Double, normHf: Swift.Double, lfHf: Swift.Double, cohRatio: Swift.Double)
  public init(hrv: [Swift.Double])
  public init(other: ESRC_Heart_SDK_iOS.ESRCHRV)
  public func getBpm() -> Swift.Double
  public func getSdnn() -> Swift.Double
  public func getRmssd() -> Swift.Double
  public func getPnn50() -> Swift.Double
  public func getVlf() -> Swift.Double
  public func getLf() -> Swift.Double
  public func getHf() -> Swift.Double
  public func getVlfp() -> Swift.Double
  public func getLfp() -> Swift.Double
  public func getHfp() -> Swift.Double
  public func getTp() -> Swift.Double
  public func getLnVlf() -> Swift.Double
  public func getLnLf() -> Swift.Double
  public func getLnHf() -> Swift.Double
  public func getLnTp() -> Swift.Double
  public func getNormLf() -> Swift.Double
  public func getNormHf() -> Swift.Double
  public func getLfHf() -> Swift.Double
  public func getCohRatio() -> Swift.Double
  public func setBpm(bpm: Swift.Double)
  public func setSdnn(sdnn: Swift.Double)
  public func setRmssd(rmssd: Swift.Double)
  public func setPnn50(pnn50: Swift.Double)
  public func setVlf(vlf: Swift.Double)
  public func setLF(lf: Swift.Double)
  public func setHf(hf: Swift.Double)
  public func setVlfp(vlfp: Swift.Double)
  public func setLfp(lfp: Swift.Double)
  public func setHfp(hfp: Swift.Double)
  public func setTp(tp: Swift.Double)
  public func setLnVlf(lnVlf: Swift.Double)
  public func setLnLf(lnLf: Swift.Double)
  public func setLnHf(lnHf: Swift.Double)
  public func setLnTp(lnTp: Swift.Double)
  public func setNormLf(normLf: Swift.Double)
  public func setNormHf(normHf: Swift.Double)
  public func setLfHf(lfHf: Swift.Double)
  public func setCohRatio(cohRatio: Swift.Double)
  public func setHRV(hrv: [Swift.Double])
  public func setHRV(hrv: ESRC_Heart_SDK_iOS.ESRCHRV)
  public func toArray() -> [Swift.Double]
  public func toString() -> Swift.String
  @objc deinit
}
public class ESRCProgressRatio {
  public init()
  public init(progress: Swift.Double)
  public init(other: ESRC_Heart_SDK_iOS.ESRCProgressRatio)
  public func getProgress() -> Swift.Double
  public func setProgress(progress: Swift.Double)
  public func toString() -> Swift.String
  @objc deinit
}
public class ESRCProperty {
  public init()
  public init(enableMeasureEnv: Swift.Bool, enableFace: Swift.Bool, enableRemoteHR: Swift.Bool, enableHRV: Swift.Bool)
  public init(other: ESRC_Heart_SDK_iOS.ESRCProperty)
  public func getEnableMeasureEnv() -> Swift.Bool
  public func getEnableFace() -> Swift.Bool
  public func getEnableRemoteHR() -> Swift.Bool
  public func getEnableHRV() -> Swift.Bool
  public func setEnableMeasureEnv(enableMeasureEnv: Swift.Bool)
  public func setEnableFace(enableFace: Swift.Bool)
  public func setEnableRemoteHR(enableRemoteHR: Swift.Bool)
  public func setEnableHRV(enableHRV: Swift.Bool)
  public func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ESRC {
  public static func getSDKVersion() -> Swift.String
  public static func getApplicationId() -> Swift.String
  public static func getInstance() -> ESRC_Heart_SDK_iOS.ESRC
  public static func initWithApplicationId(appId: Swift.String, licenseHandler: ESRC_Heart_SDK_iOS.ESRCLicenseHandler) -> Swift.Bool
  public static func start(property: ESRC_Heart_SDK_iOS.ESRCProperty, handler: ESRC_Heart_SDK_iOS.ESRCHandler) -> Swift.Bool
  public static func stop() -> Swift.Bool
  public static func feed(frame: UIKit.UIImage) -> Swift.Bool
  public func getESRCHandler() -> ESRC_Heart_SDK_iOS.ESRCHandler?
  @objc deinit
}
public protocol ESRCHandler {
  func onAnalyzedMeasureEnv(measureEnv: ESRC_Heart_SDK_iOS.ESRCMeasureEnv)
  func onDetectedFace(face: ESRC_Heart_SDK_iOS.ESRCFace)
  func onNotDetectedFace()
  func didChangedProgressRatioOnRemoteHR(progressRatio: Swift.Double)
  func onEstimatedRemoteHR(remoteHR: ESRC_Heart_SDK_iOS.ESRCRemoteHR)
  func didChangedProgressRatioOnHRV(progressRatio: Swift.Double)
  func onAnalyzedHRV(hrv: ESRC_Heart_SDK_iOS.ESRCHRV)
}
